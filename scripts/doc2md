#!/usr/bin/env python

import argparse
import os
from importlib import import_module
from doc2md import sort_modules, print_overview

parser = argparse.ArgumentParser(description='doc2md: Docstring to Markdown parser.')
parser.add_argument('module', help='Name of the module for which the docstrings shoud be generated.')
parser.add_argument('-d', '--depth', type=int, default=0, help='Submodule depth for the generation of markdown files. Default (0) will only print the top level overview. Increase this number to cover submodules in the same manner.')
parser.add_argument('-o', '--out', default=None, help='Name of the output directory. Defaults to a print to stdout')
parser.add_argument('--mode', default='default', choices=['default', 'full', 'short'], help='By default, the top layer of a module will be printed as a summary (without printing the docstrings for each class and method) and each subsequent layer will be printed with the full docstrings. This can be overridden with this argument.')
parser.add_argument('--level', type=int, default=1, help='The top-level header. Default (1) translates to <h1> headers')
args = parser.parse_args()


# Import the requested module
try:
    module  = import_module(args.module)
    MODULES = sort_modules(module)
except ImportError:
    print(f"Cound not import module '{args.module}'. Make sure it is installed proeprly.")
    exit(1)


# Create output directory
if args.out is not None:
    c = 0
    out = args.out
    while os.path.exists(out):
        c += 1
        out = args.out + f".{c:03d}"
    if out != args.out:
        print(f"{args.out} already exists, will use {out} instead.")
    os.makedirs(out)
else:
    out = None


# work work
def recursive_print(M, depth):
    # Adjust the level in case everything is printed to stdout
    l = args.level+depth if out is None else args.level
    mode = True if args.mode == 'full' else False if args.mode == 'short' else depth > 0
    print_overview(M, level=l, dirname=out, full=mode)
    if M['modules'] != [] and depth < args.depth:
        for m in M['modules']:
            recursive_print(m, depth+1)

recursive_print(MODULES, 0)
